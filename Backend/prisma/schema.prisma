// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId Int @id @default(autoincrement()) @map("id")
  firstName String @map("first_name") @db.VarChar(50)
  lastName String @map("last_name") @db.VarChar(50)
  password String @db.VarChar(100)
  username String @db.VarChar(20) @unique

  // @One to many user can have many Itineraries
  userItineraries Itinerary[]
}

model Itinerary {
  itineraryId Int @id @default(autoincrement()) @map("id")
  budget Float?
  title String? @db.VarChar(100)

  // @ManyToOne with user
  userItineraryId Int? @map("user_id")
  user User? @relation(fields: [userItineraryId], references: [userId])

  // One to many. Many itineraries can have one country
  countryItineraryId Int? @map("country_id")
  country Country? @relation(fields: [countryItineraryId], references: [countryId])

  // @manytomany  One itinerary can have many destination, Relationship between Iternary <-> destination
  destination Destination[]
}

model Country {
  countryId  Int @id @default(autoincrement()) @map("id")
  name String @db.VarChar(50)
  itineraries Itinerary[]

  destinations Destination[]
}
//
model Destination {
  destinationId Int @id @default(autoincrement()) @map("id")
  cost Float
  name String @db.VarChar(50)
  notes String

  // Relationship between destination -> country
  destinationCountryId Int? @map("country_id")
  country Country? @relation(fields: [destinationCountryId], references: [countryId])

  // @manytomany Relationship between Destination <-> Iternary
  itineraries Itinerary[]
}
